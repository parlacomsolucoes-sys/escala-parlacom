import { useState, useEffect } from "react";
import { X, Save } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { useToast } from "@/hooks/use-toast";
import { useCreateEmployee, useUpdateEmployee } from "@/hooks/useSchedule";
import type { Employee, InsertEmployee } from "@shared/schema";

interface EmployeeModalProps {
  isOpen: boolean;
  onClose: () => void;
  employee?: Employee;
}

const WEEKDAYS = [
  { value: "sunday", label: "Dom" },
  { value: "monday", label: "Seg" },
  { value: "tuesday", label: "Ter" },
  { value: "wednesday", label: "Qua" },
  { value: "thursday", label: "Qui" },
  { value: "friday", label: "Sex" },
  { value: "saturday", label: "Sáb" },
] as const;

export default function EmployeeModal({ isOpen, onClose, employee }: EmployeeModalProps) {
  const { toast } = useToast();
  const createEmployee = useCreateEmployee();
  const updateEmployee = useUpdateEmployee();
  
  const [formData, setFormData] = useState<InsertEmployee>({
    name: "",
    workDays: ["monday", "tuesday", "wednesday", "thursday", "friday"],
    defaultStartTime: "08:00",
    defaultEndTime: "18:00",
    isActive: true,
    weekendRotation: false,
    customSchedule: {},
  });

  useEffect(() => {
    if (employee) {
      setFormData({
        name: employee.name,
        workDays: employee.workDays,
        defaultStartTime: employee.defaultStartTime,
        defaultEndTime: employee.defaultEndTime,
        isActive: employee.isActive,
        weekendRotation: employee.weekendRotation,
        customSchedule: employee.customSchedule,
      });
    } else {
      setFormData({
        name: "",
        workDays: ["monday", "tuesday", "wednesday", "thursday", "friday"],
        defaultStartTime: "08:00",
        defaultEndTime: "18:00",
        isActive: true,
        weekendRotation: false,
        customSchedule: {},
      });
    }
  }, [employee, isOpen]);

  if (!isOpen) return null;

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      if (employee) {
        await updateEmployee.mutateAsync({ id: employee.id, ...formData });
        toast({
          title: "Funcionário atualizado!",
          description: "As alterações foram salvas com sucesso.",
        });
      } else {
        await createEmployee.mutateAsync(formData);
        toast({
          title: "Funcionário criado!",
          description: "O novo funcionário foi adicionado com sucesso.",
        });
      }
      onClose();
    } catch (error) {
      toast({
        title: "Erro",
        description: "Ocorreu um erro ao salvar. Tente novamente.",
        variant: "destructive",
      });
    }
  };

  const handleWorkDayChange = (day: string, checked: boolean) => {
    if (checked) {
      setFormData({
        ...formData,
        workDays: [...formData.workDays, day] as any,
      });
    } else {
      setFormData({
        ...formData,
        workDays: formData.workDays.filter((d) => d !== day) as any,
      });
    }
  };

  const handleCustomScheduleChange = (day: string, field: 'startTime' | 'endTime', value: string) => {
    setFormData({
      ...formData,
      customSchedule: {
        ...formData.customSchedule,
        [day]: {
          ...formData.customSchedule?.[day],
          [field]: value,
        },
      },
    });
  };

  const removeCustomSchedule = (day: string) => {
    const newCustomSchedule = { ...formData.customSchedule };
    delete newCustomSchedule[day];
    setFormData({
      ...formData,
      customSchedule: newCustomSchedule,
    });
  };

  const isLoading = createEmployee.isPending || updateEmployee.isPending;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white dark:bg-gray-800 rounded-lg p-6 w-full max-w-md max-h-[90vh] overflow-y-auto">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-bold">
            {employee ? "Editar Funcionário" : "Novo Funcionário"}
          </h2>
          <button
            onClick={onClose}
            className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
          >
            <X size={24} />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <Label htmlFor="name">Nome</Label>
            <Input
              id="name"
              value={formData.name}
              onChange={(e) => setFormData({ ...formData, name: e.target.value })}
              required
            />
          </div>

          <div>
            <Label>Dias de Trabalho</Label>
            <div className="grid grid-cols-4 gap-2 mt-2">
              {WEEKDAYS.map((day) => (
                <div key={day.value} className="flex items-center space-x-2">
                  <Checkbox
                    id={day.value}
                    checked={formData.workDays.includes(day.value as any)}
                    onCheckedChange={(checked) => handleWorkDayChange(day.value, checked as boolean)}
                  />
                  <Label htmlFor={day.value} className="text-sm">
                    {day.label}
                  </Label>
                </div>
              ))}
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <Label htmlFor="defaultStartTime">Início Padrão</Label>
              <Input
                id="defaultStartTime"
                type="time"
                value={formData.defaultStartTime}
                onChange={(e) => setFormData({ ...formData, defaultStartTime: e.target.value })}
                required
              />
            </div>
            <div>
              <Label htmlFor="defaultEndTime">Fim Padrão</Label>
              <Input
                id="defaultEndTime"
                type="time"
                value={formData.defaultEndTime}
                onChange={(e) => setFormData({ ...formData, defaultEndTime: e.target.value })}
                required
              />
            </div>
          </div>

          <div className="flex items-center space-x-2">
            <Checkbox
              id="isActive"
              checked={formData.isActive}
              onCheckedChange={(checked) => setFormData({ ...formData, isActive: checked as boolean })}
            />
            <Label htmlFor="isActive">Ativo</Label>
          </div>

          <div className="flex items-center space-x-2">
            <Checkbox
              id="weekendRotation"
              checked={formData.weekendRotation}
              onCheckedChange={(checked) => setFormData({ ...formData, weekendRotation: checked as boolean })}
            />
            <Label htmlFor="weekendRotation">Rotação de Fins de Semana</Label>
          </div>

          {/* Custom Schedule Section */}
          <div>
            <Label>Horários Personalizados</Label>
            <div className="space-y-2 mt-2">
              {formData.workDays.map((day) => {
                const dayLabel = WEEKDAYS.find(d => d.value === day)?.label;
                const customSchedule = formData.customSchedule?.[day];
                
                return (
                  <div key={day} className="border rounded-lg p-3">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm font-medium">{dayLabel}</span>
                      {customSchedule && (
                        <button
                          type="button"
                          onClick={() => removeCustomSchedule(day)}
                          className="text-red-500 hover:text-red-700 text-sm"
                        >
                          Remover
                        </button>
                      )}
                    </div>
                    
                    <div className="grid grid-cols-2 gap-2">
                      <div>
                        <Input
                          type="time"
                          value={customSchedule?.startTime || formData.defaultStartTime}
                          onChange={(e) => handleCustomScheduleChange(day, 'startTime', e.target.value)}
                          placeholder={formData.defaultStartTime}
                        />
                      </div>
                      <div>
                        <Input
                          type="time"
                          value={customSchedule?.endTime || formData.defaultEndTime}
                          onChange={(e) => handleCustomScheduleChange(day, 'endTime', e.target.value)}
                          placeholder={formData.defaultEndTime}
                        />
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>

          <div className="flex justify-end space-x-2 pt-4">
            <Button type="button" variant="outline" onClick={onClose}>
              Cancelar
            </Button>
            <Button type="submit" disabled={isLoading}>
              <Save className="w-4 h-4 mr-2" />
              {isLoading ? "Salvando..." : "Salvar"}
            </Button>
          </div>
        </form>
      </div>
    </div>
  );
}
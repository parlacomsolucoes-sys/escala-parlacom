import { z } from "zod";

// Employee schema
export const insertEmployeeSchema = z.object({
  name: z.string().min(1, "Nome é obrigatório"),
  workDays: z.array(z.enum(["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"])),
  defaultStartTime: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, "Formato de hora inválido"),
  defaultEndTime: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, "Formato de hora inválido"),
  isActive: z.boolean().default(true),
  weekendRotation: z.boolean().default(false),
  customSchedule: z.record(z.string(), z.object({
    startTime: z.string(),
    endTime: z.string()
  })).optional()
});

export const updateEmployeeSchema = insertEmployeeSchema.partial().extend({
  id: z.string()
});

export type InsertEmployee = z.infer<typeof insertEmployeeSchema>;
export type UpdateEmployee = z.infer<typeof updateEmployeeSchema>;

export interface Employee extends InsertEmployee {
  id: string;
  createdAt: string;
  updatedAt: string;
}

// Holiday schema - supports both legacy date format and new month/day format
const baseHolidaySchema = z.object({
  name: z.string().min(1, "Nome é obrigatório"),
  // Legacy field for backward compatibility
  date: z.string().optional(),
  // New fields for recurrent holidays
  month: z.number().min(1).max(12).optional(),
  day: z.number().min(1).max(31).optional(),
  description: z.string().optional()
});

export const insertHolidaySchema = baseHolidaySchema.transform((data) => {
  // Handle legacy date format (MM-DD or YYYY-MM-DD)
  if (data.date && !data.month && !data.day) {
    const dateMatch = data.date.match(/^(\d{4}-)?(\d{2})-(\d{2})$/);
    if (dateMatch) {
      data.month = parseInt(dateMatch[2]);
      data.day = parseInt(dateMatch[3]);
      // Keep the date field for backward compatibility
      data.date = dateMatch[2] + "-" + dateMatch[3];
    }
  }
  // If month and day are provided, generate the MM-DD date string
  else if (data.month && data.day) {
    const monthStr = String(data.month).padStart(2, '0');
    const dayStr = String(data.day).padStart(2, '0');
    data.date = `${monthStr}-${dayStr}`;
  }
  return data;
});

export const updateHolidaySchema = baseHolidaySchema.partial().extend({
  id: z.string()
});

export type InsertHoliday = z.infer<typeof insertHolidaySchema>;
export type UpdateHoliday = z.infer<typeof updateHolidaySchema>;

export interface Holiday extends InsertHoliday {
  id: string;
  createdAt: string;
  updatedAt: string;
}

// Assignment schema
export const insertAssignmentSchema = z.object({
  employeeId: z.string(),
  employeeName: z.string(),
  startTime: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, "Formato de hora inválido"),
  endTime: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, "Formato de hora inválido")
});

export type InsertAssignment = z.infer<typeof insertAssignmentSchema>;

export interface Assignment extends InsertAssignment {
  id: string;
}

// Schedule Entry schema
export const insertScheduleEntrySchema = z.object({
  date: z.string().regex(/^\d{4}-\d{2}-\d{2}$/, "Data deve estar no formato YYYY-MM-DD"),
  assignments: z.array(insertAssignmentSchema)
});

export type InsertScheduleEntry = z.infer<typeof insertScheduleEntrySchema>;

export interface ScheduleEntry extends InsertScheduleEntry {
  id: string;
  createdAt: string;
  updatedAt: string;
}

// Monthly Schedule Generation Request
export const generateMonthlyScheduleSchema = z.object({
  year: z.number().min(2020).max(2030),
  month: z.number().min(1).max(12)
});

export type GenerateMonthlyScheduleRequest = z.infer<typeof generateMonthlyScheduleSchema>;

// Weekend Rotation Metadata schema
export const rotationMetaSchema = z.object({
  rotationIndex: z.number().default(0),
  swapParity: z.number().min(0).max(1).default(0),
  lastProcessedWeekendISO: z.string().optional(),
  createdAt: z.string(),
  updatedAt: z.string()
});

export type RotationMeta = z.infer<typeof rotationMetaSchema>;

export interface RotationMetaDoc extends RotationMeta {
  id: string; // Format: YYYY-MM
}

// Utility function to normalize time format
export function normalizeTime(time: string): string {
  const match = time.match(/^(\d{1,2}):(\d{2})$/);
  if (!match) return time;
  
  const [, hours, minutes] = match;
  return `${hours.padStart(2, '0')}:${minutes}`;
}

// Utility function to check if date is weekend
export function isWeekend(date: Date): boolean {
  const day = date.getDay();
  return day === 0 || day === 6; // Sunday or Saturday
}

// Utility function to check if date is holiday (supports recurrent MM-DD format)
export function isHoliday(date: Date, holidays: Holiday[]): Holiday | undefined {
  const targetMonth = date.getMonth() + 1; // 1-12
  const targetDay = date.getDate(); // 1-31
  
  return holidays.find(holiday => {
    // Check if holiday has month and day fields (new format)
    if (holiday.month && holiday.day) {
      return holiday.month === targetMonth && holiday.day === targetDay;
    }
    
    // Fallback to legacy date format
    if (holiday.date) {
      // Handle MM-DD format
      if (holiday.date.includes('-') && holiday.date.length === 5) {
        const [month, day] = holiday.date.split('-').map(Number);
        return month === targetMonth && day === targetDay;
      }
      // Handle YYYY-MM-DD format (full date match)
      const dateString = date.toISOString().split('T')[0];
      return holiday.date === dateString;
    }
    
    return false;
  });
}

// Utility function to get week number
export function getWeekNumber(date: Date): number {
  const target = new Date(date.valueOf());
  const dayNr = (date.getDay() + 6) % 7;
  target.setDate(target.getDate() - dayNr + 3);
  const firstThursday = target.valueOf();
  target.setMonth(0, 1);
  if (target.getDay() !== 4) {
    target.setMonth(0, 1 + ((4 - target.getDay()) + 7) % 7);
  }
  return 1 + Math.ceil((firstThursday - target.valueOf()) / 604800000);
}
